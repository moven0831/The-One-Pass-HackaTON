;;
;;  TON NFT Item Smart Contract - Single
;;

#include "utils/stdlib.fc";
#include "utils/op-codes.fc";
#include "utils/params.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;; storage TL-B scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress storage::next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

global slice storage::owner_address;
global cell storage::content;
global int storage::voucher_index;
global cell storage::royalty_params;

() load_data() inline {
  var ds = get_data().begin_parse();
  
  storage::owner_address      = ds~load_msg_addr();
  storage::content            = ds~load_ref();
  storage::voucher_index      = ds~load_uint(8);
  storage::royalty_params     = ds~load_ref();
}

() store_data() impure inline {
  set_data(
    begin_cell().store_slice(storage::owner_address)
                .store_ref(storage::content)
                .store_uint(storage::voucher_index, 8)
                .store_ref(storage::royalty_params)
                .end_cell()
  );
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
  var msg = begin_cell().store_uint(0x10, 6)
                        .store_slice(to_address)
                        .store_coins(0)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_uint(op::report_royalty_params(), 32)
                        .store_uint(query_id, 64)
                        .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() send_msg(
  slice to_address,
  int amount,
  int op,
  int query_id,
  builder payload,
  int send_mode
) impure inline {
  ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
  var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);

  if (~ builder_depth(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(
  int my_balance,
  slice sender_address,
  int query_id,
  slice in_msg_body,
  int fwd_fees
) impure inline {
  ;; check that the address of the "change owner command sender" is equal to the address of the owner,
  ;; i.e. only the current owner can change.
  throw_unless(401, equal_slice_bits(sender_address, storage::owner_address));

  slice new_owner_address = in_msg_body~load_msg_addr();

  ;; The force_chain function checks that the address is in workchain number 0 (the base workchain)
  force_chain(new_owner_address);
  
  ;; get the address where to send the notification that the owner has changed
  slice response_destination = in_msg_body~load_msg_addr();
  in_msg_body~load_int(1); ;; this nft don't use custom_payload
  int forward_amount = in_msg_body~load_coins();

  int rest_amount = my_balance - min_tons_for_storage();
  if (forward_amount) {
    rest_amount -= (forward_amount + fwd_fees);
  }
  int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
  if (need_response) {
    rest_amount -= fwd_fees;
  }

  ;; base nft spends fixed amount of gas, will not check for response
  throw_unless(402, rest_amount >= 0);

  ;; send a notification to the new owner
  if (forward_amount) {
    send_msg(
      new_owner_address,
      forward_amount,
      op::ownership_assigned(),
      query_id,
      begin_cell().store_slice(storage::owner_address)
                    .store_slice(in_msg_body),
      1
    );  ;; paying fees, revert on errors
  }

  ;; send a notification to the address that was specified for the notification
  if (need_response) {
    force_chain(response_destination);
    send_msg(
      response_destination,
      rest_amount,
      op::excesses(),
      query_id,
      null(),
      1
    ); ;; paying fees, revert on errors
  }

  store_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }
  slice sender_address = cs~load_msg_addr();

  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  load_data();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::transfer()) {
    transfer_ownership(
      my_balance,
      sender_address,
      query_id,
      in_msg_body,
      fwd_fee
    );
    return ();
  }
  if (op == op::get_static_data()) {
    ;; carry all the remaining value of the inbound message
    cell addr_none = begin_cell().store_uint(0, 2).end_cell();
    
    send_msg(
      sender_address,
      0,
      op::report_static_data(),
      query_id,
      begin_cell().store_uint(0, 256)
                  .store_slice(addr_none.begin_parse()),
      64
    );
    return ();
  }
  throw(0xffff);
}

;; Get methods

(int, int, slice) royalty_params() method_id {
  load_data();
  slice rs = storage::royalty_params.begin_parse();
  return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

int voucher_index() method_id {
  load_data();
  return storage::voucher_index;
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  load_data();
  slice cs = storage::content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}
