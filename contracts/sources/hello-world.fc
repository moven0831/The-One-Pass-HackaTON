#include "utils/stdlib.fc";

;; =============== storage =============================


(int) load_data() inline {                 ;; read function declaration - returns int as result
  slice ds = get_data().begin_parse();     ;; load the storage cell and start parsing as a slice
  return (ds~load_uint(64));               ;; read a 64 bit unsigned int from the slice and return it
}

() save_data(int counter) impure inline {  ;; write function declaration - takes an int as arg
  set_data(begin_cell()                    ;; store the storage cell and create it with a builder 
    .store_uint(counter, 64)               ;; write a 64 bit unsigned int to the builder
    .end_cell());                          ;; convert the builder to a cell
}


;; =============== messages =============================


() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {  ;; well known function signature
  ~dump(msg_value);                         ;; first debug print
  if (in_msg_body.slice_empty?()) {         ;; check if incoming message is empty (with no body)
    return ();                              ;; return successfully and accept an empty message
  }
  int op = in_msg_body~load_uint(32);       ;; parse the operation type encoded in the beginning of msg body
  var (counter) = load_data();              ;; call our read utility function to load values from storage
  if (op == 1) {                            ;; handle op #1 = increment
    ~strdump("increment received");         ;; debug
    save_data(counter + 1);                 ;; call our write utility function to persist values to storage
  }
}


;; =============== getters =============================


int counter() method_id {           ;; getter declaration - returns int as result
  var (counter) = load_data();    ;; call our read utility function to load value
  return counter;
}
