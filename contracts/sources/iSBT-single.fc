;;
;;  The Open Pass @ Hack-a-TONx
;;  TON Incentivized SBT Smart Contract - Single
;;  ---
;;  The incentivized soul-bound token enables users to transfer their SBTs among their personal addresses.
;;  Based on the game theory framework, they have no motivations to sell, rent, or lend their SBT in a trustless manner.
;;

;;
;;  Storage
;;
;;  MsgAddressInt owner_address
;;  uint256 owner_public_key
;;  cell content
;;  MsgAddressInt authority_address
;;  uint256 authority_public_key
;;  tuple[MsgAddressInt] editor_addresses
;;  tuple[MsgAddressInt] prev_owner_address
;;  uint64 reclaim_at
;;  uint16 remained_redeemable_index
;;

#include "utils/stdlib.fc";
#include "utils/op-codes.fc";
#include "utils/params.fc";
#include "utils/tuple.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

global slice storage::owner_address;
global int storage::owner_public_key;
global cell storage::content;
global slice storage::authority_address;
global int storage::authority_public_key;
global tuple storage::editor_addresses;
global tuple storage::prev_owner_address;
global int storage::reclaim_at;
global int storage::remained_redeemable_index;

() load_data() inline {
  var ds = get_data().begin_parse();
  
  storage::owner_address                  = ds~load_msg_addr();
  storage::owner_public_key               = ds~load_uint(256);
  storage::content                        = ds~load_ref();
  storage::authority_address              = ds~load_msg_addr();
  storage::authority_public_key           = ds~load_uint(256);
  repeat(3) { tpush(storage::editor_addresses, ds~load_msg_addr()); }
  repeat(3) { tpush(storage::prev_owner_address, ds~load_msg_addr()); }
  storage::reclaim_at                     = ds~load_uint(64);
  storage::remained_redeemable_index      = ds~load_uint(16);
}

() store_data() impure inline {
  set_data(
    begin_cell().store_slice(storage::owner_address)
                .store_uint(storage::owner_public_key, 256)
                .store_ref(storage::content)
                .store_slice(storage::authority_address)
                .store_uint(storage::authority_public_key, 256)
                .store_slice(first(storage::editor_addresses))
                .store_slice(second(storage::editor_addresses))
                .store_slice(third(storage::editor_addresses))
                .store_slice(first(storage::prev_owner_address))
                .store_slice(second(storage::prev_owner_address))
                .store_slice(third(storage::prev_owner_address))
                .store_uint(storage::reclaim_at, 64)
                .store_uint(storage::remained_redeemable_index, 16)
                .end_cell()
  );
}

() send_msg(
  int flag,
  slice to_address,
  int amount,
  int op,
  int query_id,
  builder payload,
  int send_mode
) impure inline {
  ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
  var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);

  if (~ builder_depth(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() update_previous_owner(slice prev_owner) {
  ;; check if there're exact 3 prev_owner_address
  throw_unless(430, tuples::tlen(storage::prev_owner_address) != 3);

  ;; if authority is current owner, skipped the update process
  if (equal_slice_bits(storage::authority_address, storage::owner_address)) { return (); }

  slice first = first(storage::editor_addresses);
  slice second = second(storage::editor_addresses);
  repeat(3) { tuples::tpop(storage::editor_addresses); }
  tpush(storage::prev_owner_address, prev_owner);
  tpush(storage::prev_owner_address, first);
  tpush(storage::prev_owner_address, second);

  return ();
}

() transfer_ownership(
  int my_balance,
  slice sender_address,
  int query_id,
  slice in_msg_body,
  int fwd_fees
) impure inline {
  ;; check that the address of the "change owner command sender" is equal to the address of the owner,
  ;; i.e. only the current owner can change.
  throw_unless(401, equal_slice_bits(sender_address, storage::owner_address));

  slice new_owner_address = in_msg_body~load_msg_addr();

  ;; The force_chain function checks that the address is in workchain number 0 (the base workchain)
  force_chain(new_owner_address);
  
  ;; get the address where to send the notification that the owner has changed
  slice response_destination = in_msg_body~load_msg_addr();
  in_msg_body~load_int(1); ;; this nft don't use custom_payload
  int forward_amount = in_msg_body~load_coins();

  ;; get new owner's public key
  int new_owner_public_key = in_msg_body~load_uint(256);

  int rest_amount = my_balance - min_tons_for_storage();
  if (forward_amount) {
    rest_amount -= (forward_amount + fwd_fees);
  }
  int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
  if (need_response) {
    rest_amount -= fwd_fees;
  }

  ;; base nft spends fixed amount of gas, will not check for response
  throw_unless(402, rest_amount >= 0);

  ;; send a notification to the new owner
  if (forward_amount) {
    send_msg(
      flag::regular(),
      new_owner_address,
      forward_amount,
      op::ownership_assigned(),
      query_id,
      begin_cell().store_slice(storage::owner_address)
                    .store_slice(in_msg_body),
      1
    );  ;; paying fees, revert on errors
  }

  ;; send a notification to the address that was specified for the notification
  if (need_response) {
    force_chain(response_destination);
    send_msg(
      flag::regular(),
      response_destination,
      rest_amount,
      op::excesses(),
      query_id,
      null(),
      1
    ); ;; paying fees, revert on errors
  }

  update_previous_owner(storage::owner_address);
  storage::owner_address = new_owner_address;
  storage::owner_public_key = new_owner_public_key;
  store_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  load_data();

  int op = in_msg_body~load_uint(32);

  if (flags & 1) { ;; route all prove_ownership bounced messages to owner
    ;; first op was 0xffffffff, because of bounced, now we need to read real one
    op = in_msg_body~load_uint(32);

    if (op == op::ownership_proof()) {
        int query_id = in_msg_body~load_uint(64);
        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular(), storage::owner_address, 0, op::ownership_proof_bounced(), query_id, null(), 64);
    }
    return ();
  }
  int query_id = in_msg_body~load_uint(64);

  if (op == op::transfer()) {
    transfer_ownership(
      my_balance,
      sender_address,
      query_id,
      in_msg_body,
      fwd_fee
    );
    return ();
  }
  if (op == op::request_owner()) {
    slice dest = in_msg_body~load_msg_addr();
    cell body = in_msg_body~load_ref();
    int with_content = in_msg_body~load_uint(1);

    var msg = begin_cell().store_uint(0, 256)
                          .store_slice(sender_address)
                          .store_slice(storage::owner_address)
                          .store_ref(body)
                          .store_uint(storage::reclaim_at, 64)
                          .store_uint(with_content, 1);

    if (with_content != 0) {
        msg = msg.store_ref(storage::content);
    }

    ;; mode 64 = carry all the remaining value of the inbound message
    send_msg(flag::regular() | flag::bounce(), dest, 0, op::owner_info(), query_id, msg, 64);
    return ();
  }
  if (op == op::prove_ownership()) {
    throw_unless(401, equal_slice_bits(storage::owner_address, sender_address));

    slice dest = in_msg_body~load_msg_addr();
    cell body = in_msg_body~load_ref();
    int with_content = in_msg_body~load_uint(1);

    var msg = begin_cell().store_uint(0, 256)
                          .store_slice(storage::owner_address)
                          .store_ref(body)
                          .store_uint(storage::reclaim_at, 64)
                          .store_uint(with_content, 1);

    if (with_content != 0) {
        msg = msg.store_ref(storage::content);
    }

    ;; mode 64 = carry all the remaining value of the inbound message
    send_msg(flag::regular() | flag::bounce(), dest, 0, op::ownership_proof(), query_id, msg, 64);
    return ();
  }
  if (op == op::get_static_data()) {
    ;; carry all the remaining value of the inbound message
    
    send_msg(
      0x10,
      sender_address,
      0,
      op::report_static_data(),
      query_id,
      begin_cell().store_uint(0, 256)
                  .store_slice(null_addr()),
      64
    );
    return ();
  }
  if (op == op::edit_content()) {
    throw_unless(410,
      equal_slice_bits(sender_address, first(storage::editor_addresses)) |
      equal_slice_bits(sender_address, second(storage::editor_addresses)) |
      equal_slice_bits(sender_address, third(storage::editor_addresses)));
      
    storage::content = in_msg_body~load_ref();
    store_data();
    return ();
  }
  if (op == op::redeem()) {
    slice ref = in_msg_body~load_ref().begin_parse();
    var signature = ref~load_bits(512);
    ;; user must get the signature of the storage::remained_redeemable_index using authority's private key and pass the signature as an argument
    ;; Replay attack resist: storage::remained_redeemable_index will update each time op::redeem() has successfully executed. Thus the signature can not be reused.
    throw_unless(404, check_signature(slice_hash(storage::remained_redeemable_index), signature, storage::owner_public_key));
    throw_unless(433, storage::remained_redeemable_index > 0);

    storage::remained_redeemable_index -= 1;
    store_data();
    return ();
  }
  if (op == op::reclaim()) {
    if (~ equal_slice_bits(sender_address, first(storage::prev_owner_address)) |
        equal_slice_bits(sender_address, second(storage::prev_owner_address)) |
        equal_slice_bits(sender_address, third(storage::prev_owner_address))) {
      
      slice ref = in_msg_body~load_ref().begin_parse();
      var signature = ref~load_bits(512);
      ;; user must get the signature of the storage::reclaim_at using authority's private key and pass the signature as an argument
      ;; Replay attack resist: storage::reclaim_at will update each time op::reclaim() has successfully executed. Thus the signature can not be reused.
      throw_unless(404, check_signature(slice_hash(storage::reclaim_at), signature, storage::authority_public_key));
      throw_unless(403, now() >= storage::reclaim_at + 3600);
    }

    storage::reclaim_at = now();
    transfer_ownership(
      my_balance,
      sender_address,
      query_id,
      in_msg_body,
      fwd_fee
    );
    return ();
  }
  if (op == op::take_excess()) {
    throw_unless(401, equal_slice_bits(storage::owner_address, sender_address));

    ;; reserve amount for storage
    raw_reserve(min_tons_for_storage(), 0);

    send_msg(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);
    return ();
  }
  throw(0xffff);
}

;; Get methods

int remained_redeemable_index() method_id {
  load_data();
  return storage::remained_redeemable_index;
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  load_data();
  slice cs = storage::content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

cell get_editors() method_id {
  load_data();
  cell cs = begin_cell().store_slice(first(storage::editor_addresses))
                        .store_slice(second(storage::editor_addresses))
                        .store_slice(third(storage::editor_addresses))
                        .end_cell();
  return cs;
}

tuple get_authority_address() method_id {
  load_data();
  return storage::prev_owner_address;
}

int get_reclaim_time() method_id {
  load_data();
  return storage::reclaim_at;
}
