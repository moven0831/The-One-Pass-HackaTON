;;
;;  The Open Pass @ Hack-a-TONx
;;  TON redeemable NFT Smart Contract - Item
;;  ---
;;  Similar to royalty, our redeemable NFT allows issuers to predefine their utility NFT redemption rules in the contract.
;;  To redeem their NFT, holders must sign a message authorizing the redemption.
;;

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  uint256 owner_public_key
;;  cell content
;;  uint16 remained_redeemable_index
;;

#include "utils/stdlib.fc";
#include "utils/op-codes.fc";
#include "utils/params.fc";


int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

global int storage::index;
global slice storage::collection_address;
global int temp::init?;
global slice storage::owner_address;
global int storage::owner_public_key;
global cell storage::content;
global int storage::remained_redeemable_index;


() load_data() {
    slice ds = get_data().begin_parse();

    storage::index = ds~load_uint(64);
    storage::collection_address = ds~load_msg_addr();
    temp::init? = ds.slice_bits() > 0 ? -1 : 0;

    ;; Successfully init
    if (temp::init?) {
      storage::owner_address = ds~load_msg_addr();
      storage::owner_public_key = ds~load_uint(256);
      storage::content = ds~load_ref();
      storage::remained_redeemable_index = ds~load_uint(16);
    }
    else {
      storage::owner_address = null();
      storage::owner_public_key = null();
      storage::content = null();
      storage::remained_redeemable_index = null();
    }
}

() store_data() impure {
  set_data(
    begin_cell().store_uint(storage::index, 64)
                .store_slice(storage::collection_address)
                .store_slice(storage::owner_address)
                .store_uint(storage::owner_public_key, 256)
                .store_ref(storage::content)
                .store_uint(storage::remained_redeemable_index, 16)
                .end_cell());
}

() send_msg(
    slice to_address,
    int amount,
    int op,
    int query_id,
    builder payload,
    int send_mode
  ) impure inline {
  var msg = begin_cell().store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                        .store_slice(to_address)
                        .store_coins(amount)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_uint(op, 32)
                        .store_uint(query_id, 64);

  if (~ builder_depth(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(
    int my_balance,
    slice sender_address,
    int query_id,
    slice in_msg_body,
    int fwd_fees
  ) impure inline {
    ;; check that the address of the "change owner command sender" is equal to the address of the owner,
    ;; i.e. only the current owner can change.
    throw_unless(401, equal_slice_bits(sender_address, storage::owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();

    ;; The force_chain function checks that the address is in workchain number 0 (the base workchain)
    force_chain(new_owner_address);
  
    ;; get the address where to send the notification that the owner has changed
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    ;; get new owner's public key
    int new_owner_public_key = in_msg_body~load_uint(256);

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    ;; base nft spends fixed amount of gas, will not check for response
    throw_unless(402, rest_amount >= 0);

    ;; send a notification to the new owner
    if (forward_amount) {
      send_msg(
        new_owner_address,
        forward_amount,
        op::ownership_assigned(),
        query_id,
        begin_cell().store_slice(storage::owner_address)
                    .store_slice(in_msg_body),
        1
      );  ;; paying fees, revert on errors
    }

    ;; send a notification to the address that was specified for the notification
    if (need_response) {
      force_chain(response_destination);
      send_msg(
        response_destination,
        rest_amount,
        op::excesses(),
        query_id,
        null(),
        1
      ); ;; paying fees, revert on errors
    }

    storage::owner_address = new_owner_address;
    storage::owner_public_key = new_owner_public_key;
    store_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    load_data();

    if (~ temp::init?) {
      throw_unless(405, equal_slice_bits(sender_address, storage::collection_address));
      
      storage::owner_address = cs~load_msg_addr();
      storage::content = cs~load_ref();
      storage::remained_redeemable_index = cs~load_uint(8);

      store_data();
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(
        my_balance,
        sender_address,
        query_id,
        in_msg_body,
        fwd_fee
      );
      return ();
    }
    if (op == op::get_static_data()) {
      ;; carry all the remaining value of the inbound message
      send_msg(
        sender_address,
        0,
        op::report_static_data(),
        query_id,
        begin_cell().store_uint(storage::index, 256)
                    .store_slice(storage::collection_address),
        64
      );
      return ();
    }
    if (op == op::redeem()) {
      slice ref = in_msg_body~load_ref().begin_parse();
      var signature = ref~load_bits(512);
      throw_unless(404, check_signature(slice_hash(in_msg_body), signature, storage::owner_public_key));
      throw_unless(433, storage::remained_redeemable_index > 0);

      storage::remained_redeemable_index -= 1;
      store_data();
      return ();
    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

int get_remained_redeemable_index() method_id {
  load_data();
  return storage::remained_redeemable_index;
}

(int, int, slice, slice, cell) get_nft_data() method_id {
  load_data();
  return (temp::init?, storage::index, storage::collection_address, storage::owner_address, storage::content);
}
